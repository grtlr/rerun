// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/graph.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: A graph that consists of nodes and edges.
///
/// By default, the graph is undirected.
#[derive(Clone, Debug)]
pub struct Graph {
    /// A list of nodes.
    pub nodes: Vec<crate::components::GraphNode>,

    /// A list of edges.
    pub edges: Option<Vec<crate::components::GraphEdge>>,

    /// Specifies if the graph is directed or undirected.
    pub graph_type: Option<crate::components::GraphType>,

    /// The position for each of the nodes.
    pub node_positions: Option<Vec<crate::components::Position2D>>,
}

impl ::re_types_core::SizeBytes for Graph {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.nodes.heap_size_bytes()
            + self.edges.heap_size_bytes()
            + self.graph_type.heap_size_bytes()
            + self.node_positions.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <Vec<crate::components::GraphNode>>::is_pod()
            && <Option<Vec<crate::components::GraphEdge>>>::is_pod()
            && <Option<crate::components::GraphType>>::is_pod()
            && <Option<Vec<crate::components::Position2D>>>::is_pod()
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 1usize]> =
    once_cell::sync::Lazy::new(|| ["rerun.components.GraphNode".into()]);

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 3usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.components.GraphEdge".into(),
            "rerun.components.GraphType".into(),
            "rerun.components.GraphIndicator".into(),
        ]
    });

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 1usize]> =
    once_cell::sync::Lazy::new(|| ["rerun.components.Position2D".into()]);

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 5usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.components.GraphNode".into(),
            "rerun.components.GraphEdge".into(),
            "rerun.components.GraphType".into(),
            "rerun.components.GraphIndicator".into(),
            "rerun.components.Position2D".into(),
        ]
    });

impl Graph {
    /// The total number of components in the archetype: 1 required, 3 recommended, 1 optional
    pub const NUM_COMPONENTS: usize = 5usize;
}

/// Indicator component for the [`Graph`] [`::re_types_core::Archetype`]
pub type GraphIndicator = ::re_types_core::GenericIndicatorComponent<Graph>;

impl ::re_types_core::Archetype for Graph {
    type Indicator = GraphIndicator;

    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.archetypes.Graph".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Graph"
    }

    #[inline]
    fn indicator() -> MaybeOwnedComponentBatch<'static> {
        static INDICATOR: GraphIndicator = GraphIndicator::DEFAULT;
        MaybeOwnedComponentBatch::Ref(&INDICATOR)
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentName, Box<dyn arrow2::array::Array>)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data
            .into_iter()
            .map(|(name, array)| (name.full_name(), array))
            .collect();
        let nodes = {
            let array = arrays_by_name
                .get("rerun.components.GraphNode")
                .ok_or_else(DeserializationError::missing_data)
                .with_context("rerun.archetypes.Graph#nodes")?;
            <crate::components::GraphNode>::from_arrow_opt(&**array)
                .with_context("rerun.archetypes.Graph#nodes")?
                .into_iter()
                .map(|v| v.ok_or_else(DeserializationError::missing_data))
                .collect::<DeserializationResult<Vec<_>>>()
                .with_context("rerun.archetypes.Graph#nodes")?
        };
        let edges = if let Some(array) = arrays_by_name.get("rerun.components.GraphEdge") {
            Some({
                <crate::components::GraphEdge>::from_arrow_opt(&**array)
                    .with_context("rerun.archetypes.Graph#edges")?
                    .into_iter()
                    .map(|v| v.ok_or_else(DeserializationError::missing_data))
                    .collect::<DeserializationResult<Vec<_>>>()
                    .with_context("rerun.archetypes.Graph#edges")?
            })
        } else {
            None
        };
        let graph_type = if let Some(array) = arrays_by_name.get("rerun.components.GraphType") {
            <crate::components::GraphType>::from_arrow_opt(&**array)
                .with_context("rerun.archetypes.Graph#graph_type")?
                .into_iter()
                .next()
                .flatten()
        } else {
            None
        };
        let node_positions = if let Some(array) = arrays_by_name.get("rerun.components.Position2D")
        {
            Some({
                <crate::components::Position2D>::from_arrow_opt(&**array)
                    .with_context("rerun.archetypes.Graph#node_positions")?
                    .into_iter()
                    .map(|v| v.ok_or_else(DeserializationError::missing_data))
                    .collect::<DeserializationResult<Vec<_>>>()
                    .with_context("rerun.archetypes.Graph#node_positions")?
            })
        } else {
            None
        };
        Ok(Self {
            nodes,
            edges,
            graph_type,
            node_positions,
        })
    }
}

impl ::re_types_core::AsComponents for Graph {
    fn as_component_batches(&self) -> Vec<MaybeOwnedComponentBatch<'_>> {
        re_tracing::profile_function!();
        use ::re_types_core::Archetype as _;
        [
            Some(Self::indicator()),
            Some((&self.nodes as &dyn ComponentBatch).into()),
            self.edges
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn ComponentBatch).into()),
            self.graph_type
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            self.node_positions
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn ComponentBatch).into()),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for Graph {}

impl Graph {
    /// Create a new `Graph`.
    #[inline]
    pub fn new(nodes: impl IntoIterator<Item = impl Into<crate::components::GraphNode>>) -> Self {
        Self {
            nodes: nodes.into_iter().map(Into::into).collect(),
            edges: None,
            graph_type: None,
            node_positions: None,
        }
    }

    /// A list of edges.
    #[inline]
    pub fn with_edges(
        mut self,
        edges: impl IntoIterator<Item = impl Into<crate::components::GraphEdge>>,
    ) -> Self {
        self.edges = Some(edges.into_iter().map(Into::into).collect());
        self
    }

    /// Specifies if the graph is directed or undirected.
    #[inline]
    pub fn with_graph_type(mut self, graph_type: impl Into<crate::components::GraphType>) -> Self {
        self.graph_type = Some(graph_type.into());
        self
    }

    /// The position for each of the nodes.
    #[inline]
    pub fn with_node_positions(
        mut self,
        node_positions: impl IntoIterator<Item = impl Into<crate::components::Position2D>>,
    ) -> Self {
        self.node_positions = Some(node_positions.into_iter().map(Into::into).collect());
        self
    }
}
