const A: u64 = 1_664_525;
const C: u64 = 1_013_904_223;
const M: u64 = 4_294_967_296;

#[derive(Clone, Debug)]
pub struct LCG {
    state: u64,
}

impl LCG {
    pub fn new(seed: u64) -> Self {
        LCG { state: seed }
    }
}

impl Default for LCG {
    fn default() -> Self {
        LCG::new(0)
    }
}

impl Iterator for LCG {
    type Item = u32;

    fn next(&mut self) -> Option<Self::Item> {
        self.state = self.state.wrapping_mul(A).wrapping_add(C) % M;
        Some(self.state as u32)
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn known_sequence() {
        // Initialize with seed 1
        let mut lcg = LCG::new(0);

        // Known sequence generated by the parameters (a, c, m) and seed 1
        let expected_values = vec![1013904223, 1196435762, 3519870697, 2868466484];

        // Check that the first 5 values generated by the LCG match the expected values
        for expected in expected_values {
            let generated = lcg.next().unwrap();
            assert_eq!(
                generated, expected,
                "Expected {}, but got {}",
                expected, generated
            );
        }
    }

    #[test]
    fn repeatability() {
        // Initialize two LCGs with the same seed
        let mut lcg1 = LCG::new(12345);
        let mut lcg2 = LCG::new(12345);

        // Generate a sequence from both and check that they are identical
        for _ in 0..1000 {
            let value1 = lcg1.next().unwrap();
            let value2 = lcg2.next().unwrap();
            assert_eq!(value1, value2, "Values diverged: {} != {}", value1, value2);
        }
    }

    #[test]
    fn different_seeds() {
        // Initialize two LCGs with different seeds
        let mut lcg1 = LCG::new(1);
        let mut lcg2 = LCG::new(2);

        // Check that their sequences differ
        let mut diverged = false;
        for _ in 0..1000 {
            let value1 = lcg1.next().unwrap();
            let value2 = lcg2.next().unwrap();
            if value1 != value2 {
                diverged = true;
                break;
            }
        }

        assert!(diverged, "Sequences did not diverge for different seeds");
    }
}
