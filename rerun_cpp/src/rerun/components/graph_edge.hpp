// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/graph_edge.fbs".

#pragma once

#include "../collection.hpp"
#include "../datatypes/graph_edge.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>
#include <utility>

namespace arrow {
    class Array;
    class DataType;
    class ListBuilder;
} // namespace arrow

namespace rerun::components {
    /// **Component**: An edge in a graph connecting two nodes.
    ///
    /// Depending on the context this could represent a directed or undirected edge.
    struct GraphEdge {
        rerun::Collection<rerun::datatypes::GraphEdge> edge;

      public:
        GraphEdge() = default;

        GraphEdge(rerun::Collection<rerun::datatypes::GraphEdge> edge_) : edge(std::move(edge_)) {}

        GraphEdge& operator=(rerun::Collection<rerun::datatypes::GraphEdge> edge_) {
            edge = std::move(edge_);
            return *this;
        }
    };
} // namespace rerun::components

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<components::GraphEdge> {
        static constexpr const char Name[] = "rerun.components.GraphEdge";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Serializes an array of `rerun::components::GraphEdge` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::GraphEdge* instances, size_t num_instances
        );

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::ListBuilder* builder, const components::GraphEdge* elements, size_t num_elements
        );
    };
} // namespace rerun
