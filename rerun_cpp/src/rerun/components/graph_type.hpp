// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/graph_type.fbs".

#pragma once

#include "../datatypes/graph_type.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::components {
    /// **Component**: Specifies if a graph has directed or undirected edges.
    struct GraphType {
        rerun::datatypes::GraphType graph_type;

      public:
        GraphType() = default;

        GraphType(rerun::datatypes::GraphType graph_type_) : graph_type(graph_type_) {}

        GraphType& operator=(rerun::datatypes::GraphType graph_type_) {
            graph_type = graph_type_;
            return *this;
        }

        /// Cast to the underlying GraphType datatype
        operator rerun::datatypes::GraphType() const {
            return graph_type;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::GraphType) == sizeof(components::GraphType));

    /// \private
    template <>
    struct Loggable<components::GraphType> {
        static constexpr const char Name[] = "rerun.components.GraphType";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::GraphType>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::GraphType` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::GraphType* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::GraphType>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::GraphType>::to_arrow(
                    &instances->graph_type,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
