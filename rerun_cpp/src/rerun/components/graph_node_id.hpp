// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/graph_node_id.fbs".

#pragma once

#include "../datatypes/graph_node_id.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::components {
    /// **Component**: A 32-bit ID representing a node in a graph.
    struct GraphNodeId {
        rerun::datatypes::GraphNodeId id;

      public:
        GraphNodeId() = default;

        GraphNodeId(rerun::datatypes::GraphNodeId id_) : id(id_) {}

        GraphNodeId& operator=(rerun::datatypes::GraphNodeId id_) {
            id = id_;
            return *this;
        }

        GraphNodeId(uint32_t id_) : id(id_) {}

        GraphNodeId& operator=(uint32_t id_) {
            id = id_;
            return *this;
        }

        /// Cast to the underlying GraphNodeId datatype
        operator rerun::datatypes::GraphNodeId() const {
            return id;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::GraphNodeId) == sizeof(components::GraphNodeId));

    /// \private
    template <>
    struct Loggable<components::GraphNodeId> {
        static constexpr const char Name[] = "rerun.components.GraphNodeId";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::GraphNodeId>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::GraphNodeId` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::GraphNodeId* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::GraphNodeId>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::GraphNodeId>::to_arrow(
                    &instances->id,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
