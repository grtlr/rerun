// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/datatypes/graph_location.fbs".

#pragma once

#include "../result.hpp"
#include "entity_path.hpp"
#include "graph_node_id.hpp"

#include <cstdint>
#include <memory>

namespace arrow {
    class Array;
    class DataType;
    class StructBuilder;
} // namespace arrow

namespace rerun::datatypes {
    /// **Datatype**: Uniquely identifies a node in a graph by its entity path and node id.
    ///
    /// We require this because the same node id can be used in multiple entities.
    struct GraphLocation {
        /// The entity path that specifies where to find the node.
        rerun::datatypes::EntityPath entity_path;

        /// The id of the node.
        rerun::datatypes::GraphNodeId node_id;

      public:
        GraphLocation() = default;
    };
} // namespace rerun::datatypes

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<datatypes::GraphLocation> {
        static constexpr const char Name[] = "rerun.datatypes.GraphLocation";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Serializes an array of `rerun::datatypes::GraphLocation` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const datatypes::GraphLocation* instances, size_t num_instances
        );

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::StructBuilder* builder, const datatypes::GraphLocation* elements,
            size_t num_elements
        );
    };
} // namespace rerun
