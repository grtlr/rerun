// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/datatypes/graph_node_id.fbs".

#pragma once

#include "../result.hpp"

#include <cstdint>
#include <memory>
#include <string>
#include <utility>

namespace arrow {
    class Array;
    class DataType;
    class StringBuilder;
} // namespace arrow

namespace rerun::datatypes {
    /// **Datatype**: A 32-bit ID representing a node in a graph.
    struct GraphNodeId {
        std::string id;

      public:
        GraphNodeId() = default;

        GraphNodeId(std::string id_) : id(std::move(id_)) {}

        GraphNodeId& operator=(std::string id_) {
            id = std::move(id_);
            return *this;
        }
    };
} // namespace rerun::datatypes

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<datatypes::GraphNodeId> {
        static constexpr const char Name[] = "rerun.datatypes.GraphNodeId";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Serializes an array of `rerun::datatypes::GraphNodeId` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const datatypes::GraphNodeId* instances, size_t num_instances
        );

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::StringBuilder* builder, const datatypes::GraphNodeId* elements,
            size_t num_elements
        );
    };
} // namespace rerun
