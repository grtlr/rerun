// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/datatypes/graph_edge.fbs".

#pragma once

#include "../result.hpp"
#include "entity_path.hpp"
#include "graph_node_id.hpp"

#include <cstdint>
#include <memory>
#include <optional>

namespace arrow {
    class Array;
    class DataType;
    class StructBuilder;
} // namespace arrow

namespace rerun::datatypes {
    /// **Datatype**: Represents an edge in a graph connecting two nodes (possible in different entities).
    ///
    /// If `source_entity` or `target_entity` is left out then the node id is assumed to be within the current entity.
    struct GraphEdge {
        /// The id of the source node.
        rerun::datatypes::GraphNodeId source;

        /// The id of the target node.
        rerun::datatypes::GraphNodeId target;

        /// The entity path of the source node.
        std::optional<rerun::datatypes::EntityPath> source_entity;

        /// The entity path of the target node.
        std::optional<rerun::datatypes::EntityPath> target_entity;

      public:
        GraphEdge() = default;
    };
} // namespace rerun::datatypes

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<datatypes::GraphEdge> {
        static constexpr const char Name[] = "rerun.datatypes.GraphEdge";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Serializes an array of `rerun::datatypes::GraphEdge` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const datatypes::GraphEdge* instances, size_t num_instances
        );

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::StructBuilder* builder, const datatypes::GraphEdge* elements, size_t num_elements
        );
    };
} // namespace rerun
