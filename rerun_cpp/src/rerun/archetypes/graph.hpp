// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/graph.fbs".

#pragma once

#include "../collection.hpp"
#include "../compiler_utils.hpp"
#include "../component_batch.hpp"
#include "../components/graph_edge.hpp"
#include "../components/graph_node.hpp"
#include "../components/graph_type.hpp"
#include "../components/position2d.hpp"
#include "../indicator_component.hpp"
#include "../result.hpp"

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::archetypes {
    /// **Archetype**: A graph that consists of nodes and edges.
    ///
    /// By default, the graph is undirected.
    struct Graph {
        /// A list of nodes.
        Collection<rerun::components::GraphNode> nodes;

        /// A list of edges.
        std::optional<Collection<rerun::components::GraphEdge>> edges;

        /// Specifies if the graph is directed or undirected.
        std::optional<rerun::components::GraphType> graph_type;

        /// The position for each of the nodes.
        std::optional<Collection<rerun::components::Position2D>> node_positions;

      public:
        static constexpr const char IndicatorComponentName[] = "rerun.components.GraphIndicator";

        /// Indicator component, used to identify the archetype when converting to a list of components.
        using IndicatorComponent = rerun::components::IndicatorComponent<IndicatorComponentName>;

      public:
        Graph() = default;
        Graph(Graph&& other) = default;

        explicit Graph(Collection<rerun::components::GraphNode> _nodes)
            : nodes(std::move(_nodes)) {}

        /// A list of edges.
        Graph with_edges(Collection<rerun::components::GraphEdge> _edges) && {
            edges = std::move(_edges);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// Specifies if the graph is directed or undirected.
        Graph with_graph_type(rerun::components::GraphType _graph_type) && {
            graph_type = std::move(_graph_type);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// The position for each of the nodes.
        Graph with_node_positions(Collection<rerun::components::Position2D> _node_positions) && {
            node_positions = std::move(_node_positions);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }
    };

} // namespace rerun::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<archetypes::Graph> {
        /// Serialize all set component batches.
        static Result<std::vector<ComponentBatch>> serialize(const archetypes::Graph& archetype);
    };
} // namespace rerun
