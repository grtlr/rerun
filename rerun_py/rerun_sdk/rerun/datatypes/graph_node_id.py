# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/graph_node_id.fbs".

# You can extend this class by creating a "GraphNodeIdExt" class in "graph_node_id_ext.py".

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseBatch,
    BaseExtensionType,
)

__all__ = ["GraphNodeId", "GraphNodeIdArrayLike", "GraphNodeIdBatch", "GraphNodeIdLike", "GraphNodeIdType"]


@define(init=False)
class GraphNodeId:
    """**Datatype**: A 32-bit ID representing a node in a graph."""

    def __init__(self: Any, id: GraphNodeIdLike):
        """Create a new instance of the GraphNodeId datatype."""

        # You can define your own __init__ function as a member of GraphNodeIdExt in graph_node_id_ext.py
        self.__attrs_init__(id=id)

    id: int = field(converter=int)

    def __array__(self, dtype: npt.DTypeLike = None) -> npt.NDArray[Any]:
        # You can define your own __array__ function as a member of GraphNodeIdExt in graph_node_id_ext.py
        return np.asarray(self.id, dtype=dtype)

    def __int__(self) -> int:
        return int(self.id)

    def __hash__(self) -> int:
        return hash(self.id)


if TYPE_CHECKING:
    GraphNodeIdLike = Union[GraphNodeId, int]
else:
    GraphNodeIdLike = Any

GraphNodeIdArrayLike = Union[GraphNodeId, Sequence[GraphNodeIdLike], int, npt.ArrayLike]


class GraphNodeIdType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.GraphNodeId"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.uint32(), self._TYPE_NAME)


class GraphNodeIdBatch(BaseBatch[GraphNodeIdArrayLike]):
    _ARROW_TYPE = GraphNodeIdType()

    @staticmethod
    def _native_to_pa_array(data: GraphNodeIdArrayLike, data_type: pa.DataType) -> pa.Array:
        array = np.asarray(data, dtype=np.uint32).flatten()
        return pa.array(array, type=data_type)
