# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/graph_edge.fbs".

# You can extend this class by creating a "GraphEdgeExt" class in "graph_edge_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import (
    BaseBatch,
    BaseExtensionType,
)

__all__ = ["GraphEdge", "GraphEdgeArrayLike", "GraphEdgeBatch", "GraphEdgeLike", "GraphEdgeType"]


def _graph_edge__source__special_field_converter_override(x: datatypes.GraphNodeIdLike) -> datatypes.GraphNodeId:
    if isinstance(x, datatypes.GraphNodeId):
        return x
    else:
        return datatypes.GraphNodeId(x)


def _graph_edge__dest__special_field_converter_override(x: datatypes.GraphNodeIdLike) -> datatypes.GraphNodeId:
    if isinstance(x, datatypes.GraphNodeId):
        return x
    else:
        return datatypes.GraphNodeId(x)


def _graph_edge__source_entity__special_field_converter_override(
    x: datatypes.EntityPathLike | None,
) -> datatypes.EntityPath | None:
    if x is None:
        return None
    elif isinstance(x, datatypes.EntityPath):
        return x
    else:
        return datatypes.EntityPath(x)


def _graph_edge__dest_entity__special_field_converter_override(
    x: datatypes.EntityPathLike | None,
) -> datatypes.EntityPath | None:
    if x is None:
        return None
    elif isinstance(x, datatypes.EntityPath):
        return x
    else:
        return datatypes.EntityPath(x)


@define(init=False)
class GraphEdge:
    """
    **Datatype**: Represents an edge in a graph connecting two nodes (possible in different entities).

    If `source_entity` or `dest_entity` is left out then the node id is assumed to be within the current entity.
    """

    def __init__(
        self: Any,
        source: datatypes.GraphNodeIdLike,
        dest: datatypes.GraphNodeIdLike,
        source_entity: datatypes.EntityPathLike | None = None,
        dest_entity: datatypes.EntityPathLike | None = None,
    ):
        """
        Create a new instance of the GraphEdge datatype.

        Parameters
        ----------
        source:
            The id of the source node.
        dest:
            The id of the target node.
        source_entity:
            The entity path of the source node.
        dest_entity:
            The entity path of the target node.

        """

        # You can define your own __init__ function as a member of GraphEdgeExt in graph_edge_ext.py
        self.__attrs_init__(source=source, dest=dest, source_entity=source_entity, dest_entity=dest_entity)

    source: datatypes.GraphNodeId = field(converter=_graph_edge__source__special_field_converter_override)
    # The id of the source node.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    dest: datatypes.GraphNodeId = field(converter=_graph_edge__dest__special_field_converter_override)
    # The id of the target node.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    source_entity: datatypes.EntityPath | None = field(
        default=None, converter=_graph_edge__source_entity__special_field_converter_override
    )
    # The entity path of the source node.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    dest_entity: datatypes.EntityPath | None = field(
        default=None, converter=_graph_edge__dest_entity__special_field_converter_override
    )
    # The entity path of the target node.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


GraphEdgeLike = GraphEdge
GraphEdgeArrayLike = Union[
    GraphEdge,
    Sequence[GraphEdgeLike],
]


class GraphEdgeType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.GraphEdge"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct([
                pa.field("source", pa.utf8(), nullable=False, metadata={}),
                pa.field("dest", pa.utf8(), nullable=False, metadata={}),
                pa.field("source_entity", pa.utf8(), nullable=True, metadata={}),
                pa.field("dest_entity", pa.utf8(), nullable=True, metadata={}),
            ]),
            self._TYPE_NAME,
        )


class GraphEdgeBatch(BaseBatch[GraphEdgeArrayLike]):
    _ARROW_TYPE = GraphEdgeType()

    @staticmethod
    def _native_to_pa_array(data: GraphEdgeArrayLike, data_type: pa.DataType) -> pa.Array:
        from rerun.datatypes import EntityPathBatch, GraphNodeIdBatch

        if isinstance(data, GraphEdge):
            data = [data]

        return pa.StructArray.from_arrays(
            [
                GraphNodeIdBatch([x.source for x in data]).as_arrow_array().storage,  # type: ignore[misc, arg-type]
                GraphNodeIdBatch([x.dest for x in data]).as_arrow_array().storage,  # type: ignore[misc, arg-type]
                EntityPathBatch([x.source_entity for x in data]).as_arrow_array().storage,  # type: ignore[misc, arg-type]
                EntityPathBatch([x.dest_entity for x in data]).as_arrow_array().storage,  # type: ignore[misc, arg-type]
            ],
            fields=list(data_type),
        )
