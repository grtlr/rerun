# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/graph_edge.fbs".

# You can extend this class by creating a "GraphEdgeExt" class in "graph_edge_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import (
    BaseBatch,
    BaseExtensionType,
)

__all__ = ["GraphEdge", "GraphEdgeArrayLike", "GraphEdgeBatch", "GraphEdgeLike", "GraphEdgeType"]


@define(init=False)
class GraphEdge:
    """**Datatype**: Represents an edge in a graph connecting two nodes (possibly in different entities)."""

    def __init__(self: Any, source: datatypes.GraphLocationLike, target: datatypes.GraphLocationLike):
        """
        Create a new instance of the GraphEdge datatype.

        Parameters
        ----------
        source:
            The id of the source node.
        target:
            The id of the target node.

        """

        # You can define your own __init__ function as a member of GraphEdgeExt in graph_edge_ext.py
        self.__attrs_init__(source=source, target=target)

    source: datatypes.GraphLocation = field()
    # The id of the source node.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    target: datatypes.GraphLocation = field()
    # The id of the target node.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


GraphEdgeLike = GraphEdge
GraphEdgeArrayLike = Union[
    GraphEdge,
    Sequence[GraphEdgeLike],
]


class GraphEdgeType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.GraphEdge"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct([
                pa.field(
                    "source",
                    pa.struct([
                        pa.field("entity_path", pa.utf8(), nullable=False, metadata={}),
                        pa.field("node_id", pa.utf8(), nullable=False, metadata={}),
                    ]),
                    nullable=False,
                    metadata={},
                ),
                pa.field(
                    "target",
                    pa.struct([
                        pa.field("entity_path", pa.utf8(), nullable=False, metadata={}),
                        pa.field("node_id", pa.utf8(), nullable=False, metadata={}),
                    ]),
                    nullable=False,
                    metadata={},
                ),
            ]),
            self._TYPE_NAME,
        )


class GraphEdgeBatch(BaseBatch[GraphEdgeArrayLike]):
    _ARROW_TYPE = GraphEdgeType()

    @staticmethod
    def _native_to_pa_array(data: GraphEdgeArrayLike, data_type: pa.DataType) -> pa.Array:
        from rerun.datatypes import GraphLocationBatch

        if isinstance(data, GraphEdge):
            data = [data]

        return pa.StructArray.from_arrays(
            [
                GraphLocationBatch([x.source for x in data]).as_arrow_array().storage,  # type: ignore[misc, arg-type]
                GraphLocationBatch([x.target for x in data]).as_arrow_array().storage,  # type: ignore[misc, arg-type]
            ],
            fields=list(data_type),
        )
