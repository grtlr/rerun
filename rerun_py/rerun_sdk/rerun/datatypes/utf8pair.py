# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/utf8_pair.fbs".

# You can extend this class by creating a "Utf8PairExt" class in "utf8pair_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import (
    BaseBatch,
    BaseExtensionType,
)

__all__ = ["Utf8Pair", "Utf8PairArrayLike", "Utf8PairBatch", "Utf8PairLike", "Utf8PairType"]


def _utf8pair__first__special_field_converter_override(x: datatypes.Utf8Like) -> datatypes.Utf8:
    if isinstance(x, datatypes.Utf8):
        return x
    else:
        return datatypes.Utf8(x)


def _utf8pair__second__special_field_converter_override(x: datatypes.Utf8Like) -> datatypes.Utf8:
    if isinstance(x, datatypes.Utf8):
        return x
    else:
        return datatypes.Utf8(x)


@define(init=False)
class Utf8Pair:
    """**Datatype**: Stores a tuple of UTF-8 strings."""

    def __init__(self: Any, first: datatypes.Utf8Like, second: datatypes.Utf8Like):
        """
        Create a new instance of the Utf8Pair datatype.

        Parameters
        ----------
        first:
            The first string.
        second:
            The second string.

        """

        # You can define your own __init__ function as a member of Utf8PairExt in utf8pair_ext.py
        self.__attrs_init__(first=first, second=second)

    first: datatypes.Utf8 = field(converter=_utf8pair__first__special_field_converter_override)
    # The first string.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    second: datatypes.Utf8 = field(converter=_utf8pair__second__special_field_converter_override)
    # The second string.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


Utf8PairLike = Utf8Pair
Utf8PairArrayLike = Union[
    Utf8Pair,
    Sequence[Utf8PairLike],
]


class Utf8PairType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.Utf8Pair"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct([
                pa.field("first", pa.utf8(), nullable=False, metadata={}),
                pa.field("second", pa.utf8(), nullable=False, metadata={}),
            ]),
            self._TYPE_NAME,
        )


class Utf8PairBatch(BaseBatch[Utf8PairArrayLike]):
    _ARROW_TYPE = Utf8PairType()

    @staticmethod
    def _native_to_pa_array(data: Utf8PairArrayLike, data_type: pa.DataType) -> pa.Array:
        from rerun.datatypes import Utf8Batch

        if isinstance(data, Utf8Pair):
            data = [data]

        return pa.StructArray.from_arrays(
            [
                Utf8Batch([x.first for x in data]).as_arrow_array().storage,  # type: ignore[misc, arg-type]
                Utf8Batch([x.second for x in data]).as_arrow_array().storage,  # type: ignore[misc, arg-type]
            ],
            fields=list(data_type),
        )
