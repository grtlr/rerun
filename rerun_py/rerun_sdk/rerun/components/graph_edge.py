# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/components/graph_edge.fbs".

# You can extend this class by creating a "GraphEdgeExt" class in "graph_edge_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import (
    BaseBatch,
    BaseExtensionType,
    ComponentBatchMixin,
    ComponentMixin,
)

__all__ = ["GraphEdge", "GraphEdgeArrayLike", "GraphEdgeBatch", "GraphEdgeLike", "GraphEdgeType"]


@define(init=False)
class GraphEdge(ComponentMixin):
    """
    **Component**: An edge in a graph connecting two nodes.

    Depending on the context this could represent a directed or undirected edge.
    """

    _BATCH_TYPE = None

    def __init__(self: Any, edge: GraphEdgeLike):
        """Create a new instance of the GraphEdge component."""

        # You can define your own __init__ function as a member of GraphEdgeExt in graph_edge_ext.py
        self.__attrs_init__(edge=edge)

    edge: list[datatypes.GraphEdge] = field()


GraphEdgeLike = GraphEdge
GraphEdgeArrayLike = Union[
    GraphEdge,
    Sequence[GraphEdgeLike],
]


class GraphEdgeType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.components.GraphEdge"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.list_(
                pa.field(
                    "item",
                    pa.struct([
                        pa.field("source", pa.utf8(), nullable=False, metadata={}),
                        pa.field("dest", pa.utf8(), nullable=False, metadata={}),
                        pa.field("source_entity", pa.utf8(), nullable=True, metadata={}),
                        pa.field("dest_entity", pa.utf8(), nullable=True, metadata={}),
                    ]),
                    nullable=False,
                    metadata={},
                )
            ),
            self._TYPE_NAME,
        )


class GraphEdgeBatch(BaseBatch[GraphEdgeArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = GraphEdgeType()

    @staticmethod
    def _native_to_pa_array(data: GraphEdgeArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError(
            "Arrow serialization of GraphEdge not implemented: We lack codegen for arrow-serialization of general structs"
        )  # You need to implement native_to_pa_array_override in graph_edge_ext.py


# This is patched in late to avoid circular dependencies.
GraphEdge._BATCH_TYPE = GraphEdgeBatch  # type: ignore[assignment]
