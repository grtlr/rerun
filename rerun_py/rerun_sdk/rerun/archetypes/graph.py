# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/archetypes/graph.fbs".

# You can extend this class by creating a "GraphExt" class in "graph_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define, field

from .. import components, datatypes
from .._baseclasses import (
    Archetype,
)
from ..error_utils import catch_and_log_exceptions

__all__ = ["Graph"]


@define(str=False, repr=False, init=False)
class Graph(Archetype):
    """
    **Archetype**: A graph that consists of nodes and edges.

    By default, the graph is undirected.
    """

    def __init__(
        self: Any,
        nodes: datatypes.GraphNodeArrayLike,
        *,
        edges: datatypes.GraphEdgeArrayLike | None = None,
        graph_type: datatypes.GraphTypeLike | None = None,
        node_positions: datatypes.Vec2DArrayLike | None = None,
    ):
        """
        Create a new instance of the Graph archetype.

        Parameters
        ----------
        nodes:
            A list of nodes.
        edges:
            A list of edges.
        graph_type:
            Specifies if the graph is directed or undirected.
        node_positions:
            The position for each of the nodes.

        """

        # You can define your own __init__ function as a member of GraphExt in graph_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(nodes=nodes, edges=edges, graph_type=graph_type, node_positions=node_positions)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            nodes=None,  # type: ignore[arg-type]
            edges=None,  # type: ignore[arg-type]
            graph_type=None,  # type: ignore[arg-type]
            node_positions=None,  # type: ignore[arg-type]
        )

    @classmethod
    def _clear(cls) -> Graph:
        """Produce an empty Graph, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    nodes: components.GraphNodeBatch = field(
        metadata={"component": "required"},
        converter=components.GraphNodeBatch._required,  # type: ignore[misc]
    )
    # A list of nodes.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    edges: components.GraphEdgeBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.GraphEdgeBatch._optional,  # type: ignore[misc]
    )
    # A list of edges.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    graph_type: components.GraphTypeBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.GraphTypeBatch._optional,  # type: ignore[misc]
    )
    # Specifies if the graph is directed or undirected.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    node_positions: components.Position2DBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.Position2DBatch._optional,  # type: ignore[misc]
    )
    # The position for each of the nodes.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
